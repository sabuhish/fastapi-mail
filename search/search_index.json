{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Fastapi-mail","text":"<p>The fastapi-mail is a simple lightweight mail system, for sending emails and attachments(individual &amp;&amp; bulk)</p> <p> </p>"},{"location":"#using-jinja2-html-templates","title":"Using Jinja2 HTML Templates","text":"<p>In order to use Jinja template langauge, you must specify the email folder within your application's working directory.</p> <p>When sending HTML emails, the CSS expected by mail servers -outlook, google, etc- must be inline CSS. Fastapi mail passes \"body\" to the rendered template. In creating the template for emails the dynamic objects should be used with the assumption that the variable is named \"body\" and that it is a python dict.</p> <p>check out jinja2 for more details  jinja2</p>"},{"location":"#guide-for-email-utils","title":"Guide for Email Utils","text":"<p>The utility allows you to check temporary email addresses, you can block any email or domain.  You can connect Redis to save and check email addresses. If you do not provide a Redis configuration,  then the utility will save it in the list or set by default.</p>"},{"location":"#writing-unittests-using-fastapi-mail","title":"Writing unittests using Fastapi-Mail","text":"<p>Fastapi-mail allows you to write unittest for your application without sending emails to non existent email address by mocking the email to be sent. To mock sending out mails, set the suppress configuration to true. Suppress send defaults to False to prevent mocking within applications.</p>"},{"location":"#support-for-reply-to-header-is-added","title":"Support for Reply-To header is added","text":"<p>Use this just like bcc but to specify addresses that should receive a reply to your message. E-mail systems MAY respect this as per RFC 2822.</p>"},{"location":"contribute/","title":"Contributing to fastapi-mail:","text":"<p>We welcome contributions to FastAPI-Mail</p>"},{"location":"contribute/#issues","title":"Issues","text":"<p>Feel free to submit issues and enhancement requests.</p> <p>FastAPI-Mail issues</p>"},{"location":"contribute/#contributing","title":"Contributing","text":"<p>Please refer to each project's style and contribution guidelines for submitting patches and additions. In general, we follow the \"fork-and-pull\" Git workflow.</p> <ol> <li>Fork the repo on GitHub</li> <li>Clone the project to your own machine</li> <li>Commit changes to your own branch</li> <li>Push your work </li> <li>Submit a Pull request so that we can review your changes</li> </ol> <p>NOTE: Be sure to merge the latest from <code>upstream</code> before making a pull request!</p>"},{"location":"example/","title":"Example","text":""},{"location":"example/#sending-email-with-fastapi-mail","title":"Sending email with FastAPI-Mail","text":""},{"location":"example/#standard-way-of-sending-email-with-fastapi","title":"Standard way of sending email with FastAPI","text":"<pre><code>from fastapi import FastAPI\nfrom starlette.responses import JSONResponse\nfrom fastapi_mail import FastMail, MessageSchema, ConnectionConfig, MessageType\nfrom pydantic import EmailStr, BaseModel\nfrom typing import List\n\nclass EmailSchema(BaseModel):\n    email: List[EmailStr]\n\n\nconf = ConnectionConfig(\n    MAIL_USERNAME = \"username\",\n    MAIL_PASSWORD = \"**********\",\n    MAIL_FROM = \"test@email.com\",\n    MAIL_PORT = 587,\n    MAIL_SERVER = \"mail server\",\n    MAIL_FROM_NAME=\"Desired Name\",\n    MAIL_STARTTLS = True,\n    MAIL_SSL_TLS = False,\n    USE_CREDENTIALS = True,\n    VALIDATE_CERTS = True\n)\n\napp = FastAPI()\n\n\n\n@app.post(\"/email\")\nasync def simple_send(email: EmailSchema) -&gt; JSONResponse:\n    html = \"\"\"&lt;p&gt;Hi this test mail, thanks for using Fastapi-mail&lt;/p&gt; \"\"\"\n\n    message = MessageSchema(\n        subject=\"Fastapi-Mail module\",\n        recipients=email.dict().get(\"email\"),\n        body=html,\n        subtype=MessageType.html)\n\n    fm = FastMail(conf)\n    await fm.send_message(message)\n    return JSONResponse(status_code=200, content={\"message\": \"email has been sent\"})\n</code></pre>"},{"location":"example/#email-as-background-task","title":"Email as background task","text":"<pre><code>@app.post(\"/emailbackground\")\nasync def send_in_background(\n    background_tasks: BackgroundTasks,\n    email: EmailSchema\n    ) -&gt; JSONResponse:\n\n    message = MessageSchema(\n        subject=\"Fastapi mail module\",\n        recipients=email.dict().get(\"email\"),\n        body=\"Simple background task\",\n        subtype=MessageType.plain)\n\n    fm = FastMail(conf)\n\n    background_tasks.add_task(fm.send_message,message)\n\n    return JSONResponse(status_code=200, content={\"message\": \"email has been sent\"})\n</code></pre>"},{"location":"example/#sending-files","title":"Sending files","text":"<pre><code>@app.post(\"/file\")\nasync def send_file(\n    background_tasks: BackgroundTasks,\n    file: UploadFile = File(...),\n    email:EmailStr = Form(...)\n    ) -&gt; JSONResponse:\n\n    message = MessageSchema(\n            subject=\"Fastapi mail module\",\n            recipients=[email],\n            body=\"Simple background task\",\n            subtype=MessageType.html,\n            attachments=[file])\n\n    fm = FastMail(conf)\n\n    background_tasks.add_task(fm.send_message,message)\n\n    return JSONResponse(status_code=200, content={\"message\": \"email has been sent\"})\n</code></pre>"},{"location":"example/#sending-multipart-messages-with-html-and-plain-text","title":"Sending Multipart messages with HTML and plain text","text":"<p>You can send multipart emails with both HTML and Plain text content by passing in the <code>multipart_subtype</code> parameter of <code>MultipartSubtypeEnum.alternative</code>, and supplying a value for the <code>alternative_body</code> parameter in <code>MessageSchema</code>:</p> <pre><code>message = MessageSchema(\n    subject=\"Fastapi-Mail module\",\n    recipients=[\"john@smith.com\"],\n    template_body=\"&lt;b&gt;This is a test email&lt;/b&gt;\",\n    subtype=MessageType.html,\n    alternative_body=\"This is a test email\",\n    multipart_subtype=MultipartSubtypeEnum.alternative,\n)\nawait fm.send_message(message)\n</code></pre>"},{"location":"example/#using-jinja2-html-templates","title":"Using Jinja2 HTML Templates","text":"<p>You can enable Jinja2 HTML Template emails by setting the <code>TEMPLATE_FOLDER</code> configuration option, and supplying a  value (which is just the name of the template file within the <code>TEMPLATE_FOLDER</code> dir) for the <code>template_name</code> parameter  in <code>FastMail.send_message()</code>. You then can pass a Dict as the <code>template_body</code> property of your <code>MessageSchema</code> object:</p> <pre><code>class EmailSchema(BaseModel):\n    email: List[EmailStr]\n    body: Dict[str, Any]\n\nconf = ConnectionConfig(\n    MAIL_USERNAME = \"YourUsername\",\n    MAIL_PASSWORD = \"strong_password\",\n    MAIL_FROM = \"your@email.com\",\n    MAIL_PORT = 587,\n    MAIL_SERVER = \"your mail server\",\n    MAIL_STARTTLS = True,\n    MAIL_SSL_TLS = False,\n    TEMPLATE_FOLDER = Path(__file__).parent / 'templates',\n)\n\n\n@app.post(\"/email\")\nasync def send_with_template(email: EmailSchema) -&gt; JSONResponse:\n\n    message = MessageSchema(\n        subject=\"Fastapi-Mail module\",\n        recipients=email.dict().get(\"email\"),\n        template_body=email.dict().get(\"body\"),\n        subtype=MessageType.html,\n        )\n\n    fm = FastMail(conf)\n    await fm.send_message(message, template_name=\"email_template.html\") \n    return JSONResponse(status_code=200, content={\"message\": \"email has been sent\"})\n</code></pre> <p>For example, assume we pass a <code>template_body</code> of:</p> <pre><code>{\n  \"first_name\": \"Fred\",\n  \"last_name\": \"Fredsson\"\n}\n</code></pre> <p>We can reference the variables in our Jinja templates as per normal:</p> <pre><code>...\n&lt;span&gt;Hello, {{ first_name }}!&lt;/span&gt;\n...\n</code></pre>"},{"location":"example/#sending-multipart-messages-with-html-and-text-jinja2-templates","title":"Sending multipart messages with HTML and Text Jinja2 Templates","text":"<p>You can send multipart emails with both HTML and Plain text content by passing in two templates to the send_message call. The same template_body dict will be used for both templates.</p> <pre><code>class EmailSchema(BaseModel):\n    email: List[EmailStr]\n    body: Dict[str, Any]\n\nconf = ConnectionConfig(\n    TEMPLATE_FOLDER = Path(__file__).parent / 'templates',\n    # ... other config options\n)\n\n\n@app.post(\"/email\")\nasync def send_with_template(email: EmailSchema) -&gt; JSONResponse:\n\n    message = MessageSchema(\n        subject=\"Fastapi-Mail module\",\n        recipients=email.dict().get(\"email\"),\n        template_body=email.dict().get(\"body\"),\n        subtype=MessageType.html)\n\n    fm = FastMail(conf)\n    await fm.send_message(\n        message,\n        html_template=\"email_template.html\",\n        plain_template=\"email_template.txt\")\n    return JSONResponse(status_code=200, content={\"message\": \"email has been sent\"})\n</code></pre>"},{"location":"example/#legacy-behaviour-040","title":"Legacy Behaviour (&lt;= 0.4.0)","text":"<p>The original behaviour in &lt;= 0.4.0 was to wrap the Dict you provide in a variable named <code>body</code> when it was provided to  Jinja behind the scenes. In these versions, you can then access your dict in your template like so:</p> <pre><code>...\n&lt;span&gt;Hello,  body.first_name !&lt;/span&gt;\n...\n</code></pre> <p>As you can see our keys in our dict are no longer the top level, they are part of the <code>body</code> variable. Nesting works  as per normal below this level also. </p>"},{"location":"example/#customizing-attachments-by-headers-and-mime-type","title":"Customizing attachments by headers and MIME type","text":"<p>Used for example for referencing Content-ID images in html of email</p> <pre><code>message = MessageSchema(\n    subject='Fastapi-Mail module',\n    recipients=recipients,\n    body=\"&lt;img src='cid:logo_image@fastapi-mail'&gt;\",\n    subtype=MessageType.html,\n    attachments=[\n            {\n                \"file\": \"/path/to/file.png\",\n                \"headers\": {\n                    \"Content-ID\": \"&lt;logo_image@fastapi-mail&gt;\",\n                    \"Content-Disposition\": \"inline; filename=\\\"file.png\\\"\",  # For inline images only\n                },\n                \"mime_type\": \"image\",\n                \"mime_subtype\": \"png\",\n            }\n        ],\n)\n\nfm = FastMail(conf)\nawait fm.send_message(message)\n</code></pre>"},{"location":"example/#adding-custom-smtp-headers","title":"Adding custom SMTP headers","text":"<pre><code>message = MessageSchema(\n    subject='Fastapi-Mail module',\n    recipients=recipients,\n    headers={\"your custom header\": \"your custom value\"}\n)\n\nfm = FastMail(conf)\nawait fm.send_message(message)\n</code></pre>"},{"location":"example/#guide-for-email-utils","title":"Guide for email utils","text":"<p>The utility allows you to check temporary email addresses, you can block any email or domain.  You can connect Redis to save and check email addresses. If you do not provide a Redis configuration,  then the utility will save it in the list or set by default.</p>"},{"location":"example/#check-disposable-email-address","title":"Check disposable email address","text":"<pre><code>async def default_checker():\n    checker = DefaultChecker()  # you can pass source argument for your own email domains\n    await checker.fetch_temp_email_domains() # require to fetch temporary email domains\n    return checker\n\n\n@app.get('/email/disposable')\nasync def simple_send(\n    domain: str = Query(...), \n    checker: DefaultChecker = Depends(default_checker)\n    ) -&gt; JSONResponse:\n\n    if await checker.is_disposable(domain):\n        return JSONResponse(status_code=400, content={'message': 'this is disposable domain'})\n\n    return JSONResponse(status_code=200, content={'message': 'email has been sent'})\n</code></pre>"},{"location":"example/#add-disposable-email-address","title":"Add disposable email address","text":"<pre><code>@app.post('/email/disposable')\nasync def add_disp_domain(\n    domains: list = Body(...,embed=True), \n    checker: DefaultChecker = Depends(default_checker)\n    ) -&gt; JSONResponse:\n\n    res = await checker.add_temp_domain(domains)\n\n    return JSONResponse(status_code=200, content={'result': res})\n</code></pre>"},{"location":"example/#add-domain-to-blocked-list","title":"Add domain to blocked list","text":"<pre><code>@app.post('/email/blocked/domains')\nasync def block_domain(\n    domain: str = Query(...), \n    checker: DefaultChecker = Depends(default_checker)\n    ) -&gt; JSONResponse:\n\n    await checker.blacklist_add_domain(domain)\n\n    return JSONResponse(status_code=200, content={'message': f'{domain} added to blacklist'})\n</code></pre>"},{"location":"example/#check-domain-blocked-or-not","title":"Check domain blocked or not","text":"<pre><code>@app.get('/email/blocked/domains')\nasync def get_blocked_domain(\n    domain: str = Query(...), \n    checker: DefaultChecker = Depends(default_checker)\n    ) -&gt; JSONResponse:\n\n    res = await checker.is_blocked_domain(domain)\n\n    return JSONResponse(status_code=200, content={\"result\": res})\n</code></pre>"},{"location":"example/#add-email-address-to-blocked-list","title":"Add email address to blocked list","text":"<pre><code>@app.post('/email/blocked/address')\nasync def block_address(\n    email: str = Query(...), \n    checker: DefaultChecker = Depends(default_checker)\n    ) -&gt; JSONResponse:\n\n    await checker.blacklist_add_email(email)\n\n    return JSONResponse(status_code=200, content={\"result\": True})\n</code></pre>"},{"location":"example/#check-email-blocked-or-not","title":"Check email blocked or not","text":"<pre><code>@app.get('/email/blocked/address')\nasync def get_block_address(\n    email: str = Query(...), \n    checker: DefaultChecker = Depends(default_checker)) -&gt; JSONResponse:\n\n    res = await checker.is_blocked_address(email)\n\n    return JSONResponse(status_code=200, content={\"result\": res})\n</code></pre>"},{"location":"example/#check-mx-record","title":"Check MX record","text":"<pre><code>@app.get('/email/mx')\nasync def test_mx(\n    email: EmailStr = Query(...),\n    full_result: bool = Query(False) ,\n    checker: DefaultChecker = Depends(default_checker)\n    ) -&gt; JSONResponse:\n\n    domain = email.split(\"@\")[-1]\n    res = await checker.check_mx_record(domain,full_result)\n\n    return JSONResponse(status_code=200, content=res)\n</code></pre>"},{"location":"example/#remove-email-address-from-blocked-list","title":"Remove email address from blocked list","text":"<pre><code>@app.delete('/email/blocked/address')\nasync def del_blocked_address(\n    email: str = Query(...), \n    checker: DefaultChecker = Depends(default_checker)\n    ) -&gt; JSONResponse:\n\n    res = await checker.blacklist_rm_email(email)\n\n    return JSONResponse(status_code=200, content={\"result\": res})\n</code></pre>"},{"location":"example/#remove-domain-from-blocked-list","title":"Remove domain from blocked list","text":"<pre><code>@app.delete('/email/blocked/domains')\nasync def del_blocked_domain(\n    domain: str = Query(...), \n    checker: DefaultChecker = Depends(default_checker)\n    ) -&gt; JSONResponse:\n\n    res = await checker.blacklist_rm_domain(domain)\n\n    return JSONResponse(status_code=200, content={\"result\": res})\n</code></pre>"},{"location":"example/#remove-domain-from-temporary-list","title":"Remove domain from temporary list","text":"<pre><code>@app.delete('/email/disposable')\nasync def del_disp_domain(\n    domains: list = Body(...,embed=True), \n    checker: DefaultChecker = Depends(default_checker)\n    ) -&gt; JSONResponse:\n\n    res = await checker.blacklist_rm_temp(domains)\n\n    return JSONResponse(status_code=200, content={'result': res})\n</code></pre>"},{"location":"example/#use-email-utils-with-redis","title":"Use email utils with Redis","text":"<pre><code>async def default_checker():\n    checker = DefaultChecker(db_provider=\"redis\")\n    await checker.init_redis()\n    return checker\n</code></pre>"},{"location":"example/#whoisxmlapi","title":"WhoIsXmlApi","text":"<pre><code>from email_utils import WhoIsXmlApi\n\nwho_is = WhoIsXmlApi(token=\"Your access token\", email=\"your@mailaddress.com\")\n\nprint(who_is.smtp_check_())    #check smtp server\nprint(who_is.is_disposable()) # check email is disposable or not\nprint(who_is.check_mx_record()) # check domain mx records \nprint(who_is.free_check) # check email domain is free or not\n</code></pre>"},{"location":"example/#unittests-using-fastapimail","title":"Unittests using FastapiMail","text":"<p>Fastapi mails allows you to write unittest for your application without sending emails to non existent email address by mocking the email to be sent. To mock sending out mails, set the suppress configuraton to true. Suppress send defaults to False to prevent mocking within applications.</p> <p>application.py</p> <pre><code>conf = ConnectionConfig(\n    MAIL_USERNAME = \"YourUsername\",\n    MAIL_PASSWORD = \"strong_password\",\n    MAIL_FROM = \"your@email.com\",\n    MAIL_PORT = 587,\n    MAIL_SERVER = \"your mail server\",\n    MAIL_STARTTLS = True,\n    MAIL_SSL_TLS = False,\n    TEMPLATE_FOLDER = Path(__file__).parent / 'templates',\n\n    # if no indicated SUPPRESS_SEND defaults to 0 (false) as below\n    # SUPPRESS_SEND=1\n)\n\nfm = FastMail(conf)\n\n@app.post(\"/email\")\nasync def simple_send(email: EmailSchema) -&gt; JSONResponse:\n\n    message = MessageSchema(\n        subject=\"Testing\",\n        recipients=email.dict().get(\"email\"),\n        body=html,\n        subtype=MessageType.html,\n        )\n\n    await fm.send_message(message)\n    return JSONResponse(status_code=200, content={\"message\": \"email has been sent\"})\n</code></pre> <p>test.py <pre><code>from starlette.testclient import TestClient\nfrom .application import app, fm\n\nclient = TestClient(app)\n\n\ndef test_send_msg():\n    fm.config.SUPPRESS_SEND = 1\n    with fm.record_messages() as outbox:\n        payload = {\"email\": [ \"user@example.com\"]}\n        response = client.post(\"/email\",json=payload)\n        assert response.status_code == 200\n        assert len(outbox) == 1\n        assert outbox[0]['from'] == \"your@email.com\"\n        assert outbox[0]['To'] == \"user@example.com\"\n</code></pre></p>"},{"location":"getting-started/","title":"\ud83d\udd79 Getting Started","text":""},{"location":"getting-started/#guide","title":"\ud83d\udd79 Guide","text":"<p>After installing the module and setting up your <code>FastApi</code> app:</p> <p>Main classes and packages are <code>FastMail</code> <code>ConnectionConfig</code> <code>MessageSchema</code> <code>email_utils.DefaultChecker</code> <code>email_utils.WhoIsXmlApi</code></p>"},{"location":"getting-started/#fastmail-class","title":"<code>FastMail</code> class","text":"<p>class has following attributes and methods</p> <ul> <li> <p>config  : ConnectionConfig class should be passed in order to establish connection</p> </li> <li> <p>send_message : The methods has two attributes, message: MessageSchema, template_name=None</p> <ul> <li>message : where you define message sturcture for email</li> <li>template_name : if you are using jinja2 consider template_name as well for passing HTML.</li> </ul> </li> </ul>"},{"location":"getting-started/#connectionconfig-class","title":"<code>ConnectionConfig</code> class","text":"<p>class has following attributes</p> <ul> <li>MAIL_USERNAME  : Username for email, some email hosts separates username from the default sender(AWS).<ul> <li>If you service does not provide username use sender address for connection.</li> </ul> </li> <li>MAIL_PASSWORD : Password for authentication</li> <li>MAIL_SERVER  : SMTP Mail server.</li> <li>MAIL_STARTTLS : For STARTTLS connections</li> <li>MAIL_SSL_TLS : For connecting over TLS/SSL</li> <li>MAIL_DEBUG : Debug mode for while sending mails, defaults 0.</li> <li>MAIL_FROM : Sender address</li> <li>MAIL_FROM_NAME : Title for Mail</li> <li>TEMPLATE_FOLDER: If you are using jinja2, specify template folder name</li> <li>SUPPRESS_SEND:  To mock sending out mail, defaults 0.</li> <li>USE_CREDENTIALS: Defaults to <code>True</code>. However it enables users to choose whether or not to login to their SMTP server.</li> <li>VALIDATE_CERTS: Defaults to <code>True</code>. It enables to choose whether to verify the mail server's certificate</li> <li>LOCAL_HOSTNAME: It enables to set the hostname of the local machine, which is used to connect to the SMTP server.</li> </ul>"},{"location":"getting-started/#messageschema-class","title":"<code>MessageSchema</code> class","text":"<p>class has following attributes</p> <ul> <li>recipients  : List of recipients.</li> <li>attachments : attachments within mail</li> <li>subject  : subject content of the mail</li> <li>body : body of the message</li> <li>cc : cc recipients of the mail</li> <li>bcc : bcc recipients of the mail</li> <li>reply_to : Reply-To recipients in the mail</li> <li>charset : charset defaults to utf-8</li> <li>subtype : subtype of the mail defaults to plain</li> </ul>"},{"location":"getting-started/#email_utilsdefaultchecker-class","title":"<code>email_utils.DefaultChecker</code> class","text":"<p>Default class for checking email from collected public resource. The class makes it possible to use redis to save data.</p> <ul> <li>source  : <code>optional</code> source for collected email data.</li> <li>db_provider  : switch to redis</li> </ul>"},{"location":"getting-started/#email_utilswhoisxmlapi-class","title":"<code>email_utils.WhoIsXmlApi</code> class","text":"<p>WhoIsXmlApi class provide working with api  WhoIsXmlApi This service gives free 1000 requests for checking email address per month.</p> <ul> <li>token  : token you can get from this WhoIsXmlApi link</li> <li>email  : email for checking</li> </ul>"},{"location":"install/","title":"\ud83d\udd28 Installation","text":""},{"location":"install/#installation","title":"\ud83d\udd28  Installation","text":"<pre><code>python3 -m venv .venv\n\nsource .venv/bin/activate\n\npip install fastapi-mail\n</code></pre> <p>Alternatively, if you prefer to use <code>poetry</code> for package dependencies:</p> <pre><code>poetry shell\n\npoetry add fastapi-mail\n</code></pre>"}]}